기본설정

라이브러리 등록

*** 스프링 주요 특징 ***

1) POJO 기반의 구성
- 관계를 구성할 때 별도의 API를 사용하지 않는 POJO(Plain Old Java Object)의 구성만으로도
  가능하도록 제작
  즉 일반적인 java 코드를 이용해서 객체를 구성하는 방식을 그대로 스프링에서 사용할 수 있다.
- 코드 개발시 개발자가 특정한 라이브러리나 컨테이너의 기술에 종속이지 않다는 것을 의미한다.

  개발자는 가장 일반적인 형태로 코드를 작성하고, 실행할 수 있기 때문에 생산성에도 유리하고,
  코드에 대한 테스트 작업 역시 좀 더 유연하게 할 수 있다는 장점이 있다.
  
2) 의존성 주입(DI)를 통한 객체간의 관계 구성 (IOC 컨테이너와 관련있음)
3) 제어의 역행(Inversion Of Control)
   객체 생성을 자바코드로 직접 처리하는 것이 아니라 컨테이너가 대신 처리한다.
   객체와 객체 사이의 의존관계 역시 컨테이너가 처리한다.
   결과적으로 소스에 의존관계가 명시되지 않으므로 결합도가 떨어져서 유지보수가 편리해진다.

3) AOP(Aspect Oriented Programming) 지원
핵심 비즈니스 로직과 공통로직을 분리함으로써 개발자가 비즈니스 로직에만 집중할 수 있게 한다.
시스템이 공통으로 가지는 보안이나 로그, 트랜잭션과 같이 비즈니스 로직은 아니지만,
반드시 처리가 필요한 부분을 스프링에서는 횡단관심사라고 하며, 스프링은 이러한 횡단 관심사를 분리해서 제작하는 것이 가능하다.

AOP는 이러한 횡단 관심사를 모듈로 분리한다. 따라서 개발자는
ㄱ. 핵심비즈니스 로직에만 집중해서 코드를 개발할 수 있다.
ㄴ. 각 프로젝트마다 다른 관심사를 적용할 때 코드의 수정을 최소할 수 있다.
ㄷ. 원하는 관심사의 유지보수가 수월한 코드를 구성할 수 있다.

4) 편리한 MVC 구조
5) WAS에 종속되지 않은 개발환경

--------------------------------------------------------------------------------------------
servlet-context.xml에 spring 골격이 모두 들어가 있음

https://mvnrepository.com/ : 필요한 라이브러리 다운로드
https://spring.io/projects/spring-framework : 스프링 버전 확인 5.1.8

1) STS(Spring Tool Suite) 플러그인 설치
	- STS는 기본적으로 Maven을 내장하고 있다.
	- 프로젝트 생성시 바로 Maven을 이용해서 스프링 관련 라이브러리가 다운로드 된다.
	

3) pom.xml 의 필요한 라이브러리를 등록
3) Maven : 프로젝트에 필요한 의존적인 라이브러리를 자동으로 관리해 주는 용도로 사용
		   pom.xml에 등록된 라이브러리를 Maven 저장소를 통해 다운로드 받아 빌드
		   pom.xml에 등록시 mvnrepository.com에서 필요한 라이브러리를 복사
		   
그 결과 다운로드 된 것이 들어가는 곳
4) Maven Dependencies 확인(C:\user\사용자\.m2\repository에 저장)

5) 스프링 pom.xml 버전
<properties>
	<java-version>1.8</java-version>
	<org.springframework-version>5.1.8.RELEASE</org.springframework-version> <!-- 스프링 버전 -->
	<org.aspectj-version>1.6.10</org.aspectj-version>
	<org.slf4j-version>1.6.6</org.slf4j-version>
</properties>

6)web.xml
<filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
	<init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
	</init-param>
</filter>

<filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>

6) 구조 설명

src/main/java ==> 개발되는 Java 코드의 경로
src/main/resources ==> 서버가 실행될 때 필요한 파일들의 경로

src/test/java ==> 태스트 전용 경로(각 테스트 코드 작성 경로)
src/test/resources ==> 테스트 시에만 사용되는 파일들 경로 

src/main/webapp/WEB-INF/spring ==> spring 설정 파일의 경로 (설정 관련) ******중요!!
그 중에서도 servlet-context.xml
src/main/webapp/WEB-INF/views ==> jsp 파일의 경로

pom.xml ==> Maven의 설정 파일 중요!! : 프로젝트에 필요한 의존적인 라이브러리를 자동으로 관리
web.xml ==> DispatcherServlet ==> servlet-context.xml ==> jsp설정,
component-scan base-package의 3번째 명이 context명이 된다. 메롱메론메로나

