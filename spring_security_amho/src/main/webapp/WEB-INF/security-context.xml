<?xml	version="1.0"	encoding="UTF-8"?>
<beans	xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:s="http://www.springframework.org/schema/security"
          xsi:schemaLocation="http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security	http://www.springframework.org/schema/security/spring-security.xsd ">

    <s:http auto-config="true" use-expressions="true" create-session="never">
        <!-- 관리자 영역 -->
        <s:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
        <!-- 권한에 관계없이 접속 가능한 영역(guest도 접속가능) -->
        <s:intercept-url pattern="/user/**" access="permitAll" />
        <!-- 로그인한 사용자의 영역 -->
        <s:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN', 'ROLE_GUEST', 'ROLE_HUMAN')" />

        <!-- 로그인 폼 --><!-- 로그인 성공했을 때 userLoginSuccessHandler 이걸 참조 하겠다. -->
        <!-- username-parameter="컬럼명" password-parameter="컬럼명" -->
        <!-- login_check.do는 시큐리티에서 알아서 제공해주는 페이지이다. 저거를 사용하면 된다. 만들지 않아도 됨 -->
        <s:form-login login-page="/user/login.do"
                        login-processing-url="/user/login_check.do"
                        authentication-success-handler-ref="userLoginSuccessHandler"
                        authentication-failure-handler-ref="userLoginFailureHandler"
                        username-parameter="userid" password-parameter="passwd"	/>

        <!-- max-sessions="1" : 같은 브라우저 여러창에서 동시 접속을 막겠다. -->
        <!-- expired-url : 세션 만료시 이동할 주소 -->
        <!-- error-if-maximum-exceeded : 최대 세션 초과시 에러 옵션 -->
        <s:session-management>
            <!-- 동시 사용자 막겠다. -->
            <s:concurrency-control max-sessions="1"
                                     expired-url="/user/login.do"
                                     error-if-maximum-exceeded="true"
            />
        </s:session-management>

        <!-- 접근권한이 없는 경우의 코드 -->
        <s:access-denied-handler ref="userDeniedHandler"/>
        <s:logout />
    </s:http>

    <bean id="userLoginSuccessHandler" class="com.security.encrypt.service.UserLoginSuccessHandler" />
    <bean id="userLoginFailureHandler" class="com.security.encrypt.service.UserLoginFailureHandler" />
    <bean id="userDeniedHandler" class="com.security.encrypt.service.UserDeniedHandler" />

    <!-- 로그인 인증 처리하는 빈 -->
    <bean id = "userService" class="com.security.encrypt.service.UserAuthenticationService">
        <constructor-arg name="sql" ref="sqlSession" />
    </bean>

    <!-- 비밀번호 암호화를 위한 빈 아주~~~~ 중요합니다 -->
    <bean id = "bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

</beans>