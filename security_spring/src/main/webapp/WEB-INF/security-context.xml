<?xml	version="1.0"	encoding="UTF-8"?>
<beans	xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:s="http://www.springframework.org/schema/security"
          xsi:schemaLocation="http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security	http://www.springframework.org/schema/security/spring-security.xsd ">

    <!--
    *** 패스에 보안을 적용하기 위한 메소드 ***
     access(String) : 주어진 SpEL 표현식의 평가 결과가 true이면 접근을 허용
     anonymous() : 익명의 사용자의 접근을 허용
     authenticated() : 인증된 사용자의 접근을 허용
     denyAll() : 무조건 접근을 허용하지 않음
     fullyAuthenticated() : 사용자가 완전히 인증되면 접근을 허용(기억되지 않음)
     hasAnyAuthority(String...) : 사용자가 주어진 권한 중 어떤 것이라도 있다면 접근을 허용
     hasAnyRole(String...) : 사용자가 주어진 역할 중 어떤 것이라도 있다면 접근을 허용
     hasAuthority(String) : 사용자가 주어진 권한이 있다면 접근을 허용
     hasIpAddress(String) : 주어진 IP로부터 요청이 왔다면 접근을 허용
     hasRole(String) : 사용자가 주어진 역할이 있다면 접근을 허용
     not() :  다른 접근 방식의 효과를 무효화
     permitAll() : 무조건 접근을 허용
     rememberMe() : 기억하기를 통해 인증된 사용자의 접근을 허용

    *** 스프링 시큐리티에서 사용 가능한 SpEL ***
     authentication : 사용자의 인증 객체
     denyAll : 항상 거짓으로 평가함
     hasAnyRole(역할 목록) : 사용자가 역할 목록 중 하나라도 역할이 있는 경우 참
     hasRole(역할) : 사용자가 주어진 역할이 있는 경우 참
     hasIpAddress(IP 주소) : 주어진 IP 주소로부터 요청이 오는 경우 참
     isAnonymous() : 사용자가 익명인 경우 참
     isAuthenticated() : 사용자가 인증된 경우 참
     isFullyAuthenticated() : 사용자가 완전히 인증된 경우 참 (기억하기(remember-me)로는 인증되지 않음)
     isRememberMe() : 사용자가 기억하기(remember-me)로 인증된 경우 참
     permitAll : 항상 참으로 평가함
     principal : 사용자의 주체 객체
    -->
    <s:http auto-config="true" use-expressions="true" >
        <!-- 인터셉터를 이용하여 권한확인 -->
        <s:intercept-url pattern="/admin/**" access="hasAuthority('USER_ADMIN')"/>
        <s:intercept-url pattern="/manager/**" access="hasAuthority('USER_MANAGER')" />
        <s:intercept-url pattern="/main" access="permitAll" />
        <s:intercept-url pattern="/user/login" access="isAnonymous()" />
        <s:intercept-url pattern="/**" access="isAuthenticated()" />
        <s:form-login/>
        <s:logout />
    </s:http>

    <!-- 방법2. DB 방식 : 컨넥션 풀 정보를 읽어온다. -->
    <!--<security:authentication-manager>
        <security:authentication-provider>
            &lt;!&ndash; security-datasource.xml - <bean name="dataSource">와 일치해야 한다. &ndash;&gt;
            <security:jdbc-user-service data-source-ref="dataSource"/>
        </security:authentication-provider>
    </security:authentication-manager>-->

    <!-- 방법1. IN 메모리 방식 -->
    <s:authentication-manager>
        <s:authentication-provider>
            <s:user-service>
                <s:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN, ROLE_USER" />
                <s:user name="user" password="{noop}user" authorities="ROLE_USER" />
                <s:user name="manager" password="{noop}m1234" authorities="USER_MANAGER" />
                <s:user name="kim" password="{noop}k1234" authorities="USER_ADMIN, USER_MANAGER" />
            </s:user-service>
        </s:authentication-provider>
    </s:authentication-manager>



</beans>